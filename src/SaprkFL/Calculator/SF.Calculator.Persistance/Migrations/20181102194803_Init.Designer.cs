// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SF.Calculator.Persistence;

namespace SF.Calculator.Persistence.Migrations
{
    [DbContext(typeof(SFCalculatorContext))]
    [Migration("20181102194803_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("SF.Calculator.Core.Model.IncomeTaxThreshold", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("FromAmount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(2,2)");

                    b.Property<int>("TaxationForm");

                    b.Property<int>("ThresholdNumber");

                    b.Property<decimal>("ToAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("IncomeTaxThresholds");

                    b.HasData(
                        new { Id = new Guid("3e80aa7c-5bd2-40c0-8ab3-e76ea03be716"), FromAmount = 0m, Percentage = 0.19m, TaxationForm = 2, ThresholdNumber = 1, ToAmount = 2147483647m },
                        new { Id = new Guid("216f62ca-6d50-4b3e-a148-60750fdac295"), FromAmount = 0m, Percentage = 0.18m, TaxationForm = 1, ThresholdNumber = 1, ToAmount = 85528m },
                        new { Id = new Guid("ed67033f-6f53-4457-b7cd-b29395e232c5"), FromAmount = 85528m, Percentage = 0.32m, TaxationForm = 1, ThresholdNumber = 2, ToAmount = 2147483647m }
                    );
                });

            modelBuilder.Entity("SF.Calculator.Core.Model.InsuranceContribution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("AccidentInsurance")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("DisabilityInsurance")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("HealthBaseAmount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("HealthInsurance")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("HealthInsuranceDiscount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("InsuranceBaseAmount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("LaborFoundInsurance")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("MedicalInsurance")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("RetirementInsurance")
                        .HasColumnType("decimal(10,2)");

                    b.Property<bool>("WithMedicalInsurance");

                    b.HasKey("Id");

                    b.ToTable("InsuranceContributions");
                });

            modelBuilder.Entity("SF.Calculator.Core.Model.InsuranceContributionsPercentage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Accident");

                    b.Property<decimal>("Disability");

                    b.Property<decimal>("Health");

                    b.Property<decimal>("HealthToDiscount");

                    b.Property<bool>("IsActive");

                    b.Property<decimal>("LaborFound");

                    b.Property<decimal>("Medical");

                    b.Property<decimal>("Retirement");

                    b.HasKey("Id");

                    b.ToTable("InsuranceContributionsPercentages");

                    b.HasData(
                        new { Id = new Guid("37096404-0885-4228-8167-2d41259903e3"), Accident = 0m, Disability = 0.08m, Health = 0.09m, HealthToDiscount = 0.0775m, IsActive = true, LaborFound = 0.0245m, Medical = 0.0245m, Retirement = 0.1952m }
                    );
                });

            modelBuilder.Entity("SF.Calculator.Core.Model.SelfEmployeeCalculation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("BaseAmount");

                    b.Property<decimal>("IncomeCostsAmount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<Guid?>("InsuranceContributionId");

                    b.Property<int>("Month");

                    b.Property<decimal>("NetPay")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("NetPayEstimate")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("TaxBaseAmount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("decimal(12,2)");

                    b.HasKey("Id");

                    b.HasIndex("InsuranceContributionId");

                    b.ToTable("SelfEmployeeCalculations");
                });

            modelBuilder.Entity("SF.Calculator.Core.Model.YearlySelfEmployeeCalculation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("TotalCosts")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("TotalIncomes")
                        .HasColumnType("decimal(12,2)");

                    b.HasKey("Id");

                    b.ToTable("YearlySelfEmployeeCalculations");
                });

            modelBuilder.Entity("SF.Calculator.Core.Model.SelfEmployeeCalculation", b =>
                {
                    b.HasOne("SF.Calculator.Core.Model.YearlySelfEmployeeCalculation")
                        .WithMany("Calculations")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SF.Calculator.Core.Model.InsuranceContribution", "InsuranceContribution")
                        .WithMany()
                        .HasForeignKey("InsuranceContributionId");
                });
#pragma warning restore 612, 618
        }
    }
}
